{
	"name": "dataflow13",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText20",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "ls_az_blob_azuredirectorysa",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				},
				{
					"linkedService": {
						"referenceName": "ls_az_blob_azuredirectorysa",
						"type": "LinkedServiceReference"
					},
					"name": "source3"
				},
				{
					"linkedService": {
						"referenceName": "ls_az_blob_azuredirectorysa",
						"type": "LinkedServiceReference"
					},
					"name": "source4"
				},
				{
					"name": "source5"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Date as date,",
				"          Category as string,",
				"          Amount as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {customerId } as integer,",
				"          { orderId } as integer,",
				"          { productId} as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'sourceca',",
				"     folderPath: 'practisefunctions',",
				"     fileName: 'employees (1).csv',",
				"     columnDelimiter: '|',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source2",
				"source(output(",
				"          SaleID as integer,",
				"          Product as string,",
				"          Quantity as double,",
				"          Price as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'sourceca',",
				"     folderPath: 'practisefunctions',",
				"     fileName: 'sales23.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source3",
				"source(output(",
				"          TransactionID as short,",
				"          Region as string,",
				"          SalesPerson as string,",
				"          SalesAmount as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'sourceca',",
				"     folderPath: 'practisefunctions',",
				"     fileName: 'transaction_data.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source4",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source5",
				"source2 aggregate(top = topN({customerId }, toLong({ productId}), 3)) ~> aggregate1",
				"source3 aggregate(top3 = topN(Product,toLong(Price), 5)) ~> aggregate2",
				"source4 derive(arr = array(Region,SalesPerson,SalesAmount)) ~> derivedColumn1",
				"derivedColumn1 derive({2ndrow} = at(arr,3)) ~> derivedColumn2",
				"derivedColumn2 derive(dr = contains(arr,equals(#item,'100'))) ~> derivedColumn3"
			]
		}
	}
}